import csv
import collections

# this class is used to clean the raw .csv file and generate training/testing dataset
class create_static_set:
    feature_names = set()
    names_values = []

    def __init__(self):
        # open file
        try:
            file = open('new_output_2/sections.csv', 'r')
            csv_reader_lines = csv.reader(file)
        except IOError:
            print('Cannot open file')

        data = []
        for row in csv_reader_lines:
            data.append(row)

        for i in range(0, len(data), 2):
            dic = collections.defaultdict(float)
            print(len(data[i]))
            for j in range(len(data[i])):
                if data[i][j].split('#')[-1] == 'name':
                    name = data[i+1][j].split('#')[-1]
                    continue
                if data[i][j] == '':
                    break
                self.feature_names.add(name + '_' + data[i][j].split('#')[-1])
                dic[name + '_' +data[i][j].split('#')[-1]] = float(data[i+1][j])

            print(dic)
            self.names_values.append(dic)



    def outputCsv(self):
        csvFile = open("new_static_analysis_2.csv", 'w', newline='')
        # print(self.feature_names)
        try:
            writer = csv.DictWriter(csvFile, fieldnames=list(self.feature_names), restval=0)
            writer.writeheader()
            for dic in self.names_values:
                writer.writerow(dic)
            print('The clean data file has been saved')
        finally:
            csvFile.close()

if __name__ == '__main__':
    dynamic_set = create_static_set()
    dynamic_set.outputCsv()