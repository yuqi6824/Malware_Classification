import json
import csv


def to_string(s):
	try:
		return str(s)
	except:
		# Change the encoding type if needed
		return s.encode('utf-8')


def reduce_item(key, value, reduced_item):
	# Reduction Condition 1
	if type(value) is list:
		i = 0
		for sub_item in value:
			reduce_item(key + '#' + to_string(i), sub_item, reduced_item)
			i = i + 1
		return reduced_item
	# Reduction Condition 2
	elif type(value) is dict:
		sub_keys = value.keys()
		for sub_key in sub_keys:
			reduce_item(key + '#' + to_string(sub_key), value[sub_key], reduced_item)
		return reduced_item
	# Base Condition
	else:
		reduced_item[to_string(key)] = to_string(value)
		return reduced_item


def parse1(path_idx, data_to_be_processed, csv_file_paths):
	imports = data_to_be_processed['imports']  # object

	with open(csv_file_paths[path_idx], 'a') as f:
		writer = csv.writer(f, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
		for item in imports:
			writer.writerow([item])
		writer.writerow(['###'])


def parse2(path_idx, data_to_be_processed, csv_file_paths, tag):
	sections = data_to_be_processed['sections']
	processed_data = []
	header = []
	reduced_item = {}
	reduce_item('sections', sections, reduced_item)
	header += reduced_item.keys()
	processed_data.append(reduced_item)

	with open(csv_file_paths[path_idx], 'a') as f:
		writer = csv.DictWriter(f, header, quoting=csv.QUOTE_ALL)
		writer.writeheader()
		for row in processed_data:
			writer.writerow(row)

		# labels
	with open(csv_file_paths[2], 'a') as f:
		writer = csv.writer(f, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
		for row in processed_data:
			writer.writerow([tag])


def extract_stat_file(output, ranges, skipped_dynamic_files={}):
	skipped_static_files = {"emotet_static":[], "swrort_static":[], "Nanobot_static": [], "Occamy_static":[], "Fsysna_static":[]}
	json_file_paths = ['static_report/emotet_static/emotet_static',
	                   'static_report/swrort_static/swrort_static',
	                   'static_report/Nanobot_static/Nanobot_static',
	                   'static_report/Occamy_static/Occamy_static',
	                   'static_report/Fsysna_static/Fsysna_static']
	nodes = ["imports", "sections", "labels"]
	csv_file_paths = [0] * len(nodes)

	for i in range(len(nodes)):
		# 1. run this firstly to get the # of skipped static files
		if not output:
			csv_file_paths[i] = "./temp_output/" + nodes[i] + ".csv"
		# 3. generate real static features for use
		else:
			csv_file_paths[i] = "./Output/" + nodes[i] + ".csv"
		f = open(csv_file_paths[i], 'w')
		f.close()

	for idx in range(len(ranges)):
		print("Start processing" + json_file_paths[idx] + "....")
		counter = 0
		skip = 0

		skipped_list = []
		if skipped_dynamic_files:
			if idx == 0:
				skipped_list = skipped_dynamic_files['emotet_behaviour']
			if idx == 1:
				skipped_list = skipped_dynamic_files['swrort_behaviour']
			if idx == 2:
				skipped_list = skipped_dynamic_files['Nanobot_behaviour']
			if idx == 3:
				skipped_list = skipped_dynamic_files['Occamy_behaviour']
			if idx == 4:
				skipped_list = skipped_dynamic_files['Fsysna_behaviour']
		#  for each file
		for count in range(ranges[idx]):
			if count in skipped_list:
				continue

			# print("current processing file: " + str(count))
			if idx == 2 and count == 161:
				skipped_static_files['Nanobot_static'].append(count)
				print("Skipped file: " + str(count))
				continue
			# 3.
			# if count in occamy_dynamic_skipped:
			# 	continue
			tag = json_file_paths[idx].split('/')[-1].split('_')[0]
			counter += 1
			fp = open(json_file_paths[idx] + str(count) + '.json', 'r')
			json_value = fp.read()
			raw_data = json.loads(json_value)
			fp.close()
			if 'data' in raw_data \
					and 'attributes' in raw_data['data'] \
					and 'pe_info' in raw_data['data']['attributes'] \
					and 'imports' in raw_data['data']['attributes']['pe_info'] \
					and 'sections' in raw_data['data']['attributes']['pe_info']:
				parse1(0, raw_data['data']['attributes']['pe_info'], csv_file_paths)
				parse2(1, raw_data['data']['attributes']['pe_info'], csv_file_paths, tag)
			else:
				skip += 1
				if idx == 0:
					skipped_static_files['emotet_static'].append(count)
				if idx == 1:
					skipped_static_files['swrort_static'].append(count)
				if idx == 2:
					skipped_static_files['Nanobot_static'].append(count)
				if idx == 3:
					skipped_static_files['Occamy_static'].append(count)
				if idx == 4:
					skipped_static_files['Fsysna_static'].append(count)
				# print("Skipped file: " + str(count))
		print("Left: " + str(counter - skip))
	return skipped_static_files


